/* 
 * (C) Copyright 2002-2003, Andy Clark.  All rights reserved.
 *
 * This file is distributed under an Apache style license. Please
 * refer to the LICENSE file for specific details.
 */

package org.cyberneko.html.filters;

import org.cyberneko.html.HTMLConfiguration;
import org.cyberneko.html.HTMLEventInfo;

import org.apache.xerces.xni.Augmentations;
import org.apache.xerces.xni.QName;
import org.apache.xerces.xni.XMLAttributes;
import org.apache.xerces.xni.XNIException;
import org.apache.xerces.xni.parser.XMLDocumentFilter;
import org.apache.xerces.xni.parser.XMLInputSource;
import org.apache.xerces.xni.parser.XMLParserConfiguration;

/**
 * This filter performs the identity operation of the original 
 * document event stream generated by the HTML scanner by removing 
 * events that are synthesized by the tag balancer. This operation
 * is essentially the same as turning off tag-balancing in the
 * parser. However, this filter is useful when you want the tag
 * balancer to report "errors" but do not want the synthesized
 * events in the output.
 * <p>
 * <strong>Note:</strong>
 * This filter requires the augmentations feature to be turned on.
 * For example:
 * <pre>
 *  XMLParserConfiguration parser = new HTMLConfiguration();
 *  parser.setFeature("http://cyberneko.org/html/features/augmentations", true);
 * </pre>
 * <p>
 * <strong>Note:</strong>
 * This isn't <em>exactly</em> the identify transform because the
 * element and attributes names may have been modified from the
 * original document. For example, by default, NekoHTML converts
 * element names to upper-case and attribute names to lower-case.
 *
 * @author Andy Clark
 *
 * @version $Id$
 */
public class Identity
    extends DefaultFilter {

    //
    // Constants
    //

    /** Augmentations feature identifier. */
    protected static final String AUGMENTATIONS = "http://cyberneko.org/html/features/augmentations";

    /** Filters property identifier. */
    protected static final String FILTERS = "http://cyberneko.org/html/properties/filters";

    //
    // XMLDocumentHandler methods
    //

    /** Start element. */
    public void startElement(QName element, XMLAttributes attributes,
                             Augmentations augs) throws XNIException {
        if (augs == null || !synthesized(augs)) {
            super.startElement(element, attributes, augs);
        }
    } // startElement(QName,XMLAttributes,Augmentations)

    /** Empty element. */
    public void emptyElement(QName element, XMLAttributes attributes,
                             Augmentations augs) throws XNIException {
        if (augs == null || !synthesized(augs)) {
            super.emptyElement(element, attributes, augs);
        }
    } // emptyElement(QName,XMLAttributes,Augmentations)

    /** End element. */
    public void endElement(QName element, Augmentations augs) 
        throws XNIException {
        if (augs == null || !synthesized(augs)) {
            super.endElement(element, augs);
        }
    } // endElement(QName,XMLAttributes,Augmentations)

    //
    // Protected static methods
    //

    /** Returns true if the information provided is synthesized. */
    protected static boolean synthesized(Augmentations augs) {
        HTMLEventInfo info = (HTMLEventInfo)augs.getItem(AUGMENTATIONS);
        return info != null ? info.isSynthesized() : false;
    } // synthesized(Augmentations):boolean

} // class Identity
