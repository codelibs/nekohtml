<?xml version='1.0' encoding='UTF-8'?>
<project default='all' basedir='.'>

 <!-- PROPERTIES -->
 <property file='build-custom.properties' />
 
 <property name='version'   value='9.6'/>
 <property name='name'      value='nekohtml'/>
 <property name='fullname'  value='${name}-${version}'/>
 <property name='Title'     value='NekoHTML'/>
 <property name='FullTitle' value='CyberNeko HTML Parser'/>
 <property name='Name'      value='${Title} ${version}'/>
 <property name='author'    value='Andy Clark'/>
 <property name='copyright' value='(C) Copyright 2002-2007, ${author}. All rights reserved.'/>
 <property name='URL'       value='http://nekohtml.sourceforge.net/index.html'/>
 
 <property name='compile.source' value='1.4' />
 <property name='compile.target' value='1.4' />
  
 <property name='src.dir'           value='src' />
 <property name='doc.dir'           value='doc' />
 <property name='data.dir'          value='data' />
 <property name='lib.dir'           value='lib' />
 <property name='build.dir'         value='build' />
 <property name='build.classes.dir' value='${build.dir}/classes' />
 <property name='build.src.dir'     value='${build.dir}/src' />
 <property name='build.doc.dir'     value='${build.dir}/doc/javadoc' />
 <property name='build.data.dir'	value='${build.dir}/data/output' />
 <property name='build.lib.dir'     value='${build.dir}/lib' />
 
 <property name='jar.file'         value='${build.lib.dir}/${name}.jar'/>
 <property name='jar.samples.file' value='${build.lib.dir}/${name}Samples.jar'/>
 <property name='jar.xni.file'     value='${build.lib.dir}/${name}Xni.jar'/>

 <property name='zip.file' value='${build.dir}/${fullname}.zip'/>
 <property name='tgz.file' value='${build.dir}/${fullname}.tar.gz'/>

 <property name='package' value='org.cyberneko.html'/>

 <property name='version.java.dir' value='${build.src.dir}/org/cyberneko/html'/>
 <property name='version.java'     value='${version.java.dir}/Version.java'/>
 
 <property name='tgz.xerces.filename'	value='Xerces-J-bin.2.9.1.tar.gz' />
 <property name='tgz.bcel.filename'		value='bcel-current.tar.gz' />
 
 <!-- DEPENDENCIES -->
 <available property='xerces.available' file='${lib.dir}/xercesImpl.jar' />
 <available property='bcel.available' file='${lib.dir}/bcel-5.2.jar' />
 
 <!-- TARGETS --> 
 <target name='all' depends='zip,tgz'/>

 <target name='init' unless='xerces.available'>
 	<fail>
 	!!! REQUIRED FILES MISSING !!!
 	
 	Please install the Xerces2 jars into the lib/ directory. 
 	</fail>
 </target>
 
 <target name='compile' depends='init,version'>
  <mkdir dir="${build.classes.dir}"/>
  <javac destdir='${build.classes.dir}' debug='true' encoding="ISO-8859-1" 
  		 source='${compile.source}' target='${compile.target}'>
  	<classpath>
  		<fileset dir='${lib.dir}' includes='xml-apis.jar,xerces*.jar' />
  	</classpath>
    <src path='${src.dir}' />
    <src path='${build.src.dir}' />
    <include name='**/*.java' />
    <exclude name='test/**' />
  </javac>
 </target>

 <target name='jar' depends='compile'>
  <mkdir dir='${build.lib.dir}' />
  <jar jarfile='${jar.file}'>
	<manifest>
    	<attribute name="Built-By" value="${author}"/>
    	<section name="org/cyberneko/html/">
		  <attribute name="Specification-Title" value="Hyper-Text Markup Language (HTML)" />
    	  <attribute name="Specification-Version" value="4.01" />
	      <attribute name="Specification-Vendor" value="World Wide Web Consortium (W3C)" />
    	  <attribute name="Implementation-Title" value="${FullTitle}" />
	      <attribute name="Implementation-Version" value="${version}" /> 
    	  <attribute name="Implementation-Vendor" value="${author}" />
		  <attribute name="Implementation-URL" value="${URL}" />
    	</section>
	</manifest>
    <fileset dir='.' includes='LICENSE*' />
    <fileset dir='${build.classes.dir}' includes='org/**/*.class' />
    <fileset dir='${src.dir}' includes='org/**/*.properties' />
  </jar>
  <jar jarfile='${jar.samples.file}'>
    <fileset dir='.' includes='LICENSE.txt' />
    <fileset dir='${build.classes.dir}' includes='sample/**' />
  </jar>
 </target> 

 <target name='jar-xni'>
  <mkdir dir="${build.lib.dir}"/>
  <jar jarfile='${jar.xni.file}'>
    <fileset dir='.' includes='LICENSE.txt' />
    <fileset dir='${src.dir}' includes='META-INF/services/**' />
  </jar>
 </target>

 <target name='zip' depends='jar,doc'>
  <zip zipfile='${zip.file}'>
    <zipfileset prefix='${fullname}' dir='.' includes='LICENSE*,README*,TODO*' />
    <zipfileset prefix='${fullname}' dir='.' includes='build.xml' />
    <zipfileset prefix='${fullname}' dir='.' includes='${src.dir}/**' />
    <zipfileset prefix='${fullname}' dir='.' includes='${doc.dir}/**' excludes='${doc.dir}/javadoc/**' />
    <zipfileset prefix='${fullname}' dir='.' includes='${data.dir}/**' />
    <zipfileset prefix='${fullname}' dir='.' includes='${lib.dir}/xercesMinimal.jar' />
    <zipfileset prefix='${fullname}' dir='${build.dir}' includes='doc/**' />
    <zipfileset prefix='${fullname}' dir='${build.lib.dir}' includes='**' />
  </zip>
 </target>

 <target name='tgz' depends='zip'>
  <unzip src='${zip.file}' dest='${build.dir}' />
  <tar destfile='${tgz.file}' compression='gzip'>
  	<tarfileset dir='${build.dir}' includes='${fullname}/**' />
  </tar>
 </target>

 <target name='doc' depends='doc-init' unless='doc.done'>
  <delete dir='${build.doc.dir}'/>
  <mkdir dir='${build.doc.dir}'/>
  <javadoc packagenames='${package},${package}.parsers,${package}.filters'
           sourcepath='${src.dir}' destdir='${build.doc.dir}'
           author='true' version='true' use='true'
           windowtitle="${Name} Implementation"
           doctitle="${Name}" encoding="ISO-8859-1"
           bottom="${copyright}" 
  />
 </target>
 
 <target name='doc-init'>
 	<dependset>
 		<srcfileset dir='${src.dir}' />
 		<targetfileset dir='${build.doc.dir}' />
 	</dependset>
 	<available property='doc.done' file='${build.doc.dir}/index.html' />	
 </target>

 <target name='version' depends='version-init' unless='available.version'>
  <echo message='Generating ${version.java}'/>
  <echo file='${version.java}'>/* ${copyright} */

package org.cyberneko.html;

/**
 * This class holds version information for the ${FullTitle}.
 *
 * @author ${author}
 */
public class Version {

    /** Returns the version string. */
    public static String getVersion() { return "${Name}"; }

    /** Prints the version string to standard output. */
    public static void main(String[] argv) {
        System.out.println(getVersion());
    } // main(String[])

} // class Version</echo>
 </target>

 <target name='version-init'>
  <mkdir dir='${version.java.dir}/'/>
  <dependset>
   <srcfilelist    dir='.' files='build.xml'/>
   <targetfilelist dir='.' files='${version.java}'/>
  </dependset>
  <available property='available.version' file='${version.java}'/>
 </target>

 <target name='minimal' depends='minimal-init,compile'>
 	<java classname='org.apache.tools.ant.Main'>
 		<classpath>
 			<pathelement path='${java.class.path}' />
 			<pathelement location='${lib.dir}/bcel-5.2.jar' />
 		</classpath>
 		<arg value='x-minimal' />
 	</java>
 </target>
 <target name='x-minimal'>
 	<unzip dest='${build.classes.dir}' src='${lib.dir}/xercesImpl.jar' />
 	<classfileset id='minimal.classes' 
 				  dir="${build.classes.dir}" includes='org/apache/**' 
 				  rootclass='org.cyberneko.html.HTMLConfiguration' 
 	/>
 	<mkdir dir='${build.lib.dir}' />
 	<jar destfile='${build.lib.dir}/xercesMinimal.jar'>
 		<fileset refid='minimal.classes' />
 		<exclude name='org/cyberneko/**' />
	</jar>
 </target>
 
 <target name='minimal-init' unless='bcel.available'>
 	<fail>
 	!!! REQUIRED FILES MISSING !!!
 	
 	Please install the BCEL jars into the lib/ directory. 
 	</fail>
</target>
 
 <target name='test' depends='jar'>
  <javac srcdir='${src.dir}' destdir='${build.classes.dir}' includes='test/**' debug='true' encoding="ISO-8859-1"/>
  <taskdef name='tester' classname='test.Tester'>
   <classpath>
    <pathelement path='${java.class.path}'/>
    <pathelement location='${build.classes.dir}' />
    <pathelement location='${jar.file}' />
   </classpath>
  </taskdef>
  <mkdir dir='${build.data.dir}' />
  <tester canondir='${data.dir}/canonical' outputdir='${build.data.dir}'>
   <fileset dir='${data.dir}' includes='test*.html'/>
  </tester>
 </target>

 <target name='clean'>
  <delete dir='${build.dir}' />
 </target>

</project>
